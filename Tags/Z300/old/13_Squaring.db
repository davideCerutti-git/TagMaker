TYPE "UDT_HMI_Alarm_V2"
VERSION : 0.1
   STRUCT
      t : Struct
         x0 : Bool;
         x1 : Bool;
         x2 : Bool;
         x3 : Bool;
         x4 : Bool;
         x5 : Bool;
         x6 : Bool;
         x7 : Bool;
         x8 : Bool;
         x9 : Bool;
         x10 : Bool;
         x11 : Bool;
         x12 : Bool;
         x13 : Bool;
         x14 : Bool;
         x15 : Bool;
      END_STRUCT;
      iHmiSumAlm : Word;
   END_STRUCT;

END_TYPE

TYPE "UDT_SquaringHmi"
VERSION : 0.1
   STRUCT
      tHMR { ExternalWritable := 'False'} : Struct   // {[Unit]|[Scada Unit]|[LowLimit]|[HigLimit]|[Acces]}
         xManualCommandEnabled { ExternalWritable := 'False'} : Bool;   // Manual Mode Enable {x|x|x|x|O}
         xEnabledSquaring { ExternalWritable := 'False'} : Bool;   // Enabled Squaring {x|x|x|x|O}
         xCleaningEnabled { ExternalWritable := 'False'} : Bool;   // Cleaning Enabled {x|x|x|x|O}
         xSquaringClose { ExternalWritable := 'False'} : Bool;   // Short cylinder Close{x|x|x|x|O}
         xSquaringOpen { ExternalWritable := 'False'} : Bool;   // Long cylinder Open {x|x|x|x|O}
         xPlatePresence { ExternalWritable := 'False'} : Bool;   // Plate Present {x|x|x|x|O}
         iState { ExternalWritable := 'False'} : Int;   // State TilterStk(1=No anomaly, 3=Run, 7=Anomaly) {x|x|x|x|O}
         iStateSensor { ExternalWritable := 'False'} : Int;
         dSquaringPositionScada { ExternalWritable := 'False'} : DInt;   // Position Scada Sqauring  [mm/100]
         tManCmd { ExternalWritable := 'False'} : Struct
            xCmdRise { ExternalWritable := 'False'} : Bool;   // Manual Command Rise{x|x|x|x|O}
            xCmdDescend { ExternalWritable := 'False'} : Bool;   // Manual Command Descend{x|x|x|x|O}
         END_STRUCT;
      END_STRUCT;
      tHMW : Struct   // {[Unit]|[Scada Unit]|[LowLimit]|[HigLimit]|[Acces]}
         xStopLocalCleaningRequest : Bool;   // Stop Cleaning {x|x|x|x|O}
         xLocalCleaningRequest : Bool;   // Cleaning Request {x|x|x|x|O}
         xEnableDisableManualCommand : Bool;   // Enable/Disable manual command{x|x|x|x|O}
         xEnableDisableSquaring : Bool;   // Enable/Disable Squaring{x|x|x|x|O}
         dTimeSquaring : DInt;   // Time Squaring  [ms]
         dSquareOffsetPosition : DInt;
         tManCmd : Struct
            xCmdRise : Bool;   // Manual Command Rise {x|x|x|x|O}
            xCmdDescend : Bool;   // Manual Command Descend{x|x|x|x|O}
         END_STRUCT;
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_AlmSquaring"
VERSION : 0.1
   STRUCT
      tEmergencyAlm : Array["STARTARRAY".."DALARM"] of "UDT_HMI_Alarm_V2";
      tAlarm : Array["STARTARRAY".."DALARM"] of "UDT_HMI_Alarm_V2";
      tWarning : Array["STARTARRAY".."DALARM"] of "UDT_HMI_Alarm_V2";
   END_STRUCT;

END_TYPE

DATA_BLOCK "Squaring_Hmi"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   STRUCT 
      Squaring : Array["STARTARRAY".."DNUMSQUARING"] of "UDT_SquaringHmi";
   END_STRUCT;


BEGIN

END_DATA_BLOCK

DATA_BLOCK "Squaring_Alm"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
NON_RETAIN
   STRUCT 
      Squaring : Array["STARTARRAY".."DNUMSQUARING"] of "UDT_AlmSquaring";   // M342
   END_STRUCT;


BEGIN

END_DATA_BLOCK

